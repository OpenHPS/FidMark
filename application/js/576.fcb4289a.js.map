{"version":3,"file":"js/576.fcb4289a.js","mappings":"0JACA,IAAIA,8BAAiCC,GAC5BA,EAAKC,QAAQ,sBAAuB,QAezCC,aAAgBC,IAClB,MAAMC,EAAe,GACrB,IAAIC,EAAQ,EACZF,EAAWA,EAASF,QAAQ,iBAAiB,CAACK,EAAGC,KAC/C,MAAMC,EAAY,QAAQH,MAG1B,OAFAD,EAAaK,KAAKF,GAClBF,IACOG,CAAS,IAElB,MAAME,EAAUP,EAASF,QAAQ,6BAA6B,CAACK,EAAGK,EAAQC,KACxE,MAAMJ,EAAY,QAAQH,MAG1B,OAFAD,EAAaK,KAAKG,GAClBP,IACOM,EAASH,CAAS,IAErBK,EAAK,CACTH,UACAN,gBAEF,OAAOS,CAAE,EAEPC,oBAAsB,CAACV,EAAcM,IAChCA,EAAQT,QAAQ,iBAAiB,CAACK,EAAGD,IAAUD,GAAcC,KAElEU,EAAgB,iBAChBC,EAAmB,oBACnBC,EAAuB,oBACvBC,EAAe,kDACfC,EAAkB,IAAIC,OAAO,IAAML,EAAgBG,EAAc,OACjEG,EAAyB,IAAID,OAAO,IAAMH,EAAuBC,EAAc,OAC/EI,EAAqB,IAAIF,OAAO,IAAMJ,EAAmBE,EAAc,OACvEK,EAA4BR,EAAgB,iBAC5CS,EAA8B,uCAC9BC,EAAwB,CAAC,YAAa,cACtCC,EAAoB,6BACpBC,EAAkB,oBAClBC,qBAAwBzB,GAAa,IAAIiB,OAAO,oCAAoCjB,QAAgB,OACpG0B,EAAkBD,qBAAqB,aACvCE,EAAeF,qBAAqB,SACpCG,EAAsBH,qBAAqB,iBAC3CI,EAAa,uBACbC,cAAiBC,GACZA,EAAMjC,QAAQ+B,EAAY,IAE/BG,EAAqB,+CACrBC,wBAA2BF,GACtBA,EAAMG,MAAMF,IAAuB,GAExCG,EAAU,wDACVC,EAAW,UACXC,EAAmB,4BACnBC,EAAa,IACbC,EAAc,IACdC,EAAoB,UACpBC,aAAe,CAACV,EAAOW,KACzB,MAAMC,EAAyBC,aAAab,GAC5C,IAAIc,EAAiB,EACrB,OAAOF,EAAuBG,cAAchD,QAAQqC,GAAS,IAAIY,KAC/D,MAAM/C,EAAW+C,EAAE,GACnB,IAAIxC,EAAU,GACVyC,EAASD,EAAE,GACXE,EAAgB,GAChBD,GAAUA,EAAOE,WAAW,IAAMV,KACpCjC,EAAUoC,EAAuBQ,OAAON,KACxCG,EAASA,EAAOI,UAAUZ,EAAkBa,OAAS,GACrDJ,EAAgB,KAElB,MAAMK,EAAU,CACdtD,WACAO,WAEIgD,EAAOb,EAAaY,GAC1B,MAAO,GAAGP,EAAE,KAAKQ,EAAKvD,WAAW+C,EAAE,KAAKE,IAAgBM,EAAKhD,UAAUyC,GAAQ,GAC/E,EAEAJ,aAAgBb,IAClB,MAAMyB,EAAazB,EAAM0B,MAAMrB,GACzBsB,EAAc,GACdC,EAAgB,GACtB,IAAIC,EAAe,EACfC,EAAoB,GACxB,IAAK,IAAIC,EAAY,EAAGA,EAAYN,EAAWH,OAAQS,IAAa,CAClE,MAAMC,EAAOP,EAAWM,GACpBC,IAASxB,GACXqB,IAEEA,EAAe,EACjBC,EAAkBvD,KAAKyD,IAEnBF,EAAkBR,OAAS,IAC7BM,EAAcrD,KAAKuD,EAAkBG,KAAK,KAC1CN,EAAYpD,KAAKkC,GACjBqB,EAAoB,IAEtBH,EAAYpD,KAAKyD,IAEfA,IAASzB,GACXsB,GAEJ,CACIC,EAAkBR,OAAS,IAC7BM,EAAcrD,KAAKuD,EAAkBG,KAAK,KAC1CN,EAAYpD,KAAKkC,IAEnB,MAAMyB,EAAmB,CACvBnB,cAAeY,EAAYM,KAAK,IAChCb,OAAQQ,GAEV,OAAOM,CAAgB,EAErBC,4BAA+BC,IACjCA,EAAUA,EAAQrE,QAAQ8B,EAAqB,KAAKd,KAAwBhB,QAAQ6B,EAAc,KAAKf,KAAiBd,QAAQ4B,EAAiB,KAAKb,KAC/IsD,GAELC,iBAAmB,CAACD,EAASE,EAAQC,IAChCH,EAAQrE,QAAQuE,GAAQ,IAAItB,KACjC,GAAIA,EAAE,GAAI,CACR,MAAMwB,EAAQxB,EAAE,GAAGU,MAAM,KACnBe,EAAI,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAMlB,OAAQoB,IAAK,CACrC,MAAMC,EAAIH,EAAME,GAAGE,OACnB,IAAKD,EACH,MACFF,EAAElE,KAAKgE,EAAalD,EAA2BsD,EAAG3B,EAAE,IACtD,CACA,OAAOyB,EAAER,KAAK,IAChB,CACE,OAAO5C,EAA4B2B,EAAE,EACvC,IAGA6B,sBAAwB,CAACC,EAAMd,EAAMf,IAChC6B,EAAOd,EAAKjE,QAAQc,EAAe,IAAMoC,EAE9C8B,iBAAoBX,GACfC,iBAAiBD,EAASnD,EAAiB4D,uBAEhDG,6BAA+B,CAACF,EAAMd,EAAMf,IAC1Ce,EAAKiB,QAAQpE,IAAkB,EAC1BgE,sBAAsBC,EAAMd,EAAMf,GAElC6B,EAAOd,EAAOf,EAAS,KAAOe,EAAO,IAAMc,EAAO7B,EAGzDiC,oBAAsB,CAACd,EAASe,KAClC,MAAMC,EAAY,IAAMD,EAAc,MAChCE,EAAY,GA4BlB,OA3BAjB,EAAUA,EAAQrE,QAAQqB,GAAoB,IAAI4B,KAChD,GAAIA,EAAE,GAAI,CACR,MAAMsC,EAAWtC,EAAE,GAAG4B,OAChB3B,EAASD,EAAE,GACXuC,EAAkBH,EAAYE,EAAWrC,EAC/C,IAAIuC,EAAiB,GACrB,IAAK,IAAId,EAAI1B,EAAE,GAAK,EAAG0B,GAAK,EAAGA,IAAK,CAClC,MAAMe,EAAOzC,EAAE,GAAG0B,GAClB,GAAa,MAATe,GAAyB,MAATA,EAClB,MAEFD,EAAiBC,EAAOD,CAC1B,CACA,MAAME,GAAeF,EAAiBD,GAAiBX,OACjDe,EAAgB,GAAGH,EAAeI,YAAYL,EAAgBX,SAASA,OAC7E,GAAIc,IAAgBC,EAAe,CACjC,MAAME,EAAkB,GAAGF,MAAkBD,IAC7CL,EAAU9E,KAAK,CACbmF,cACAG,mBAEJ,CACA,OAAON,CACT,CACE,OAAOlE,EAA4B2B,EAAE,EACvC,IAEK,CACLqC,YACAjB,UACD,EAEC0B,wBAA2B1B,GACtBC,iBAAiBD,EAASjD,EAAwB6D,8BAEvDe,0BAA6B3B,GACxB7C,EAAsByE,QAAO,CAACC,EAAQC,IAAYD,EAAOlG,QAAQmG,EAAS,MAAM9B,GAErF+B,iBAAoBC,IACtB,MAAMC,EAAM,MACNC,EAAM,MAEZ,OADAF,EAAiBA,EAAerG,QAAQsG,EAAK,OAAOtG,QAAQuG,EAAK,OAC1D,IAAIpF,OAAO,KAAOkF,EAAiB,IAAM5E,EAAmB,IAAI,EAErE+E,qBAAuB,CAACtG,EAAUmG,KACpC,MAAMI,EAAKL,iBAAiBC,GAC5B,OAAQI,EAAGC,KAAKxG,EAAS,EAEvByG,sBAAwB,CAACzG,EAAU0G,IAC9B1G,EAASF,QAAQuC,GAAkB,CAAClC,EAAGwG,EAAS,GAAIC,EAAaC,EAAQ,GAAIC,EAAQ,KACnFH,EAASD,EAAkBG,EAAQC,IAG1CC,yBAA2B,CAAC/G,EAAUmG,EAAgBa,KAExD,GADAxF,EAAgByF,UAAY,EACxBzF,EAAgBgF,KAAKxG,GAAW,CAClC,MAAMK,EAAY,IAAI2G,IACtB,OAAOhH,EAASF,QAAQuB,GAA6B,CAAClB,EAAG+G,IAAcT,sBAAsBS,EAAW7G,KAAYP,QAAQ0B,EAAiBnB,EAAY,IAC3J,CACA,OAAO8F,EAAiB,IAAMnG,CAAQ,EAEpCmH,yBAA2B,CAACnH,EAAUmG,EAAgBa,KACxD,MAAMI,EAAO,mBACbjB,EAAiBA,EAAerG,QAAQsH,GAAM,CAACjH,KAAMoE,IAAUA,EAAM,KACrE,MAAM8C,EAAY,IAAMlB,EAClBmB,mBAAsB5C,IAC1B,IAAI6C,EAAU7C,EAAEC,OAChB,IAAK4C,EACH,MAAO,GAET,GAAI7C,EAAEM,QAAQ5D,IAA8B,EAC1CmG,EAAUR,yBAAyBrC,EAAGyB,EAAgBa,OACjD,CACL,MAAMQ,EAAI9C,EAAE5E,QAAQ0B,EAAiB,IACjCgG,EAAEnE,OAAS,IACbkE,EAAUd,sBAAsBe,EAAGH,GAEvC,CACA,OAAOE,CAAO,EAEVE,EAAc1H,aAAaC,GACjCA,EAAWyH,EAAYlH,QACvB,IAEImH,EAFAC,EAAiB,GACjBC,EAAa,EAEjB,MAAMC,EAAM,sBACNC,EAAU9H,EAASgF,QAAQ5D,IAA8B,EAC/D,IAAI2G,GAAeD,EACnB,MAAsC,QAA9BJ,EAAMG,EAAIG,KAAKhI,IAAqB,CAC1C,MAAMiI,EAAYP,EAAI,GAChBQ,EAAQlI,EAASmI,MAAMP,EAAYF,EAAIxH,OAAOyE,OACpDoD,EAAcA,GAAeG,EAAMlD,QAAQ5D,IAA8B,EACzE,MAAMgH,EAAaL,EAAcT,mBAAmBY,GAASA,EAC7DP,GAAkB,GAAGS,KAAcH,KACnCL,EAAaC,EAAIZ,SACnB,CACA,MAAMlD,EAAO/D,EAASoD,UAAUwE,GAGhC,OAFAG,EAAcA,GAAehE,EAAKiB,QAAQ5D,IAA8B,EACxEuG,GAAkBI,EAAcT,mBAAmBvD,GAAQA,EACpDpD,oBAAoB8G,EAAYxH,aAAc0H,EAAe,EAElEU,cAAgB,CAACrI,EAAUsI,EAAmBtB,EAAcuB,IACvDvI,EAASyD,MAAM,KAAK+E,KAAKC,GAC1BF,GAAgBE,EAAYzD,QAAQ,IAAMuD,IAAiB,EACtDE,EAAY9D,OAEjB2B,qBAAqBmC,EAAaH,GAC7BnB,yBAAyBsB,EAAaH,EAAmBtB,GAAcrC,OAEvE8D,EAAY9D,SAEpBX,KAAK,MAEN0E,eAAiB,CAACvE,EAASmE,EAAmBtB,EAAcuB,EAAcI,IACrElG,aAAa0B,GAAUZ,IAC5B,IAAIvD,EAAWuD,EAAKvD,SAChBO,EAAUgD,EAAKhD,QACM,MAArBgD,EAAKvD,SAAS,GAChBA,EAAWqI,cAAc9E,EAAKvD,SAAUsI,EAAmBtB,EAAcuB,IAChEhF,EAAKvD,SAASkD,WAAW,WAAaK,EAAKvD,SAASkD,WAAW,cAAgBK,EAAKvD,SAASkD,WAAW,UAAYK,EAAKvD,SAASkD,WAAW,gBACtJ3C,EAAUmI,eAAenF,EAAKhD,QAAS+H,EAAmBtB,EAAcuB,EAAcI,IAExF,MAAMrF,EAAU,CACdtD,SAAUA,EAASF,QAAQ,UAAW,KAAK6E,OAC3CpE,WAEF,OAAO+C,CAAO,IAGdsF,aAAe,CAACzE,EAAS0E,EAASC,EAAa5D,EAAayD,KAC9DxE,EAAUD,4BAA4BC,GACtCA,EAAUW,iBAAiBX,GAC3BA,EAAU0B,wBAAwB1B,GAClC,MAAM4E,EAAU9D,oBAAoBd,EAASe,GAQ7C,OAPAf,EAAU4E,EAAQ5E,QAClBA,EAAU2B,0BAA0B3B,GAChC0E,IACF1E,EAAUuE,eAAevE,EAAS0E,EAASC,EAAa5D,EAAayD,IAEvExE,EAAU6E,qBAAqB7E,EAAS2E,GACxC3E,EAAUA,EAAQrE,QAAQ,uBAAwB,QAC3C,CACLqE,QAASA,EAAQQ,OAGjBsE,iBAAkBF,EAAQ3D,UAAUoD,KAAKU,IAAQ,CAC/CzD,YAAauD,qBAAqBE,EAAIzD,YAAaqD,GACnDlD,gBAAiBoD,qBAAqBE,EAAItD,gBAAiBkD,OAE9D,EAECE,qBAAuB,CAAC7E,EAAS2E,IAC5B3E,EAAQrE,QAAQ,gCAAiC,IAAIgJ,KAE1DK,SAAW,CAAChF,EAAS0E,EAASF,KAChC,MAAMG,EAAcD,EAAU,KACxB3D,EAAc2D,EAAU,KACxBO,EAAmBnH,wBAAwBkC,GACjDA,EAAUrC,cAAcqC,GACxB,MAAMkF,EAAe,GACrB,GAAIV,EAAyB,CAC3B,MAAMW,yBAA4B/F,IAChC,MAAMgG,EAAc,UAAUF,EAAahG,cACrCmG,EAAU,OAAOjG,EAAKvD,aAG5B,OAFAqJ,EAAa/I,KAAK,CAAEiJ,cAAaC,YACjCjG,EAAKvD,SAAWuJ,EAAchG,EAAKvD,SAC5BuD,CAAI,EAEbY,EAAU1B,aAAa0B,GAAUZ,GACN,MAArBA,EAAKvD,SAAS,GACTsJ,yBAAyB/F,GACvBA,EAAKvD,SAASkD,WAAW,WAAaK,EAAKvD,SAASkD,WAAW,cAAgBK,EAAKvD,SAASkD,WAAW,UAAYK,EAAKvD,SAASkD,WAAW,cACtJK,EAAKhD,QAAUkC,aAAac,EAAKhD,QAAS+I,0BACnC/F,GAEFA,GAEX,CACA,MAAMkG,EAASb,aAAazE,EAAS0E,EAASC,EAAa5D,EAAayD,GAWxE,OAVAxE,EAAU,CAACsF,EAAOtF,WAAYiF,GAAkBpF,KAAK,MACjD2E,GACFU,EAAaK,SAAQ,EAAGH,cAAaC,cACnCrF,EAAUA,EAAQrE,QAAQyJ,EAAaC,EAAQ,IAGnDC,EAAOR,iBAAiBS,SAASpE,IAC/B,MAAMqE,EAAQ,IAAI1I,OAAOrB,8BAA8B0F,EAAgBG,aAAc,KACrFtB,EAAUA,EAAQrE,QAAQ6J,EAAOrE,EAAgBM,gBAAgB,IAE5DzB,CAAO","sources":["webpack://eswc2024/./node_modules/@stencil/core/internal/client/shadow-css.js"],"sourcesContent":["// src/utils/regular-expression.ts\nvar escapeRegExpSpecialCharacters = (text) => {\n  return text.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n};\n\n// src/utils/shadow-css.ts\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from `webcomponents.js` to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nvar safeSelector = (selector) => {\n  const placeholders = [];\n  let index = 0;\n  selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n    const replaceBy = `__ph-${index}__`;\n    placeholders.push(keep);\n    index++;\n    return replaceBy;\n  });\n  const content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n    const replaceBy = `__ph-${index}__`;\n    placeholders.push(exp);\n    index++;\n    return pseudo + replaceBy;\n  });\n  const ss = {\n    content,\n    placeholders\n  };\n  return ss;\n};\nvar restoreSafeSelector = (placeholders, content) => {\n  return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nvar _polyfillHost = \"-shadowcsshost\";\nvar _polyfillSlotted = \"-shadowcssslotted\";\nvar _polyfillHostContext = \"-shadowcsscontext\";\nvar _parenSuffix = \")(?:\\\\(((?:\\\\([^)(]*\\\\)|[^)(]*)+?)\\\\))?([^,{]*)\";\nvar _cssColonHostRe = new RegExp(\"(\" + _polyfillHost + _parenSuffix, \"gim\");\nvar _cssColonHostContextRe = new RegExp(\"(\" + _polyfillHostContext + _parenSuffix, \"gim\");\nvar _cssColonSlottedRe = new RegExp(\"(\" + _polyfillSlotted + _parenSuffix, \"gim\");\nvar _polyfillHostNoCombinator = _polyfillHost + \"-no-combinator\";\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nvar _selectorReSuffix = \"([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$\";\nvar _polyfillHostRe = /-shadowcsshost/gim;\nvar createSupportsRuleRe = (selector) => new RegExp(`((?<!(^@supports(.*)))|(?<={.*))(${selector}\\\\b)`, \"gim\");\nvar _colonSlottedRe = createSupportsRuleRe(\"::slotted\");\nvar _colonHostRe = createSupportsRuleRe(\":host\");\nvar _colonHostContextRe = createSupportsRuleRe(\":host-context\");\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nvar stripComments = (input) => {\n  return input.replace(_commentRe, \"\");\n};\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nvar extractCommentsWithHash = (input) => {\n  return input.match(_commentWithHashRe) || [];\n};\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar _curlyRe = /([{}])/g;\nvar _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nvar OPEN_CURLY = \"{\";\nvar CLOSE_CURLY = \"}\";\nvar BLOCK_PLACEHOLDER = \"%BLOCK%\";\nvar processRules = (input, ruleCallback) => {\n  const inputWithEscapedBlocks = escapeBlocks(input);\n  let nextBlockIndex = 0;\n  return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n    const selector = m[2];\n    let content = \"\";\n    let suffix = m[4];\n    let contentPrefix = \"\";\n    if (suffix && suffix.startsWith(\"{\" + BLOCK_PLACEHOLDER)) {\n      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n      contentPrefix = \"{\";\n    }\n    const cssRule = {\n      selector,\n      content\n    };\n    const rule = ruleCallback(cssRule);\n    return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n  });\n};\nvar escapeBlocks = (input) => {\n  const inputParts = input.split(_curlyRe);\n  const resultParts = [];\n  const escapedBlocks = [];\n  let bracketCount = 0;\n  let currentBlockParts = [];\n  for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n    const part = inputParts[partIndex];\n    if (part === CLOSE_CURLY) {\n      bracketCount--;\n    }\n    if (bracketCount > 0) {\n      currentBlockParts.push(part);\n    } else {\n      if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(\"\"));\n        resultParts.push(BLOCK_PLACEHOLDER);\n        currentBlockParts = [];\n      }\n      resultParts.push(part);\n    }\n    if (part === OPEN_CURLY) {\n      bracketCount++;\n    }\n  }\n  if (currentBlockParts.length > 0) {\n    escapedBlocks.push(currentBlockParts.join(\"\"));\n    resultParts.push(BLOCK_PLACEHOLDER);\n  }\n  const strEscapedBlocks = {\n    escapedString: resultParts.join(\"\"),\n    blocks: escapedBlocks\n  };\n  return strEscapedBlocks;\n};\nvar insertPolyfillHostInCssText = (cssText) => {\n  cssText = cssText.replace(_colonHostContextRe, `$1${_polyfillHostContext}`).replace(_colonHostRe, `$1${_polyfillHost}`).replace(_colonSlottedRe, `$1${_polyfillSlotted}`);\n  return cssText;\n};\nvar convertColonRule = (cssText, regExp, partReplacer) => {\n  return cssText.replace(regExp, (...m) => {\n    if (m[2]) {\n      const parts = m[2].split(\",\");\n      const r = [];\n      for (let i = 0; i < parts.length; i++) {\n        const p = parts[i].trim();\n        if (!p)\n          break;\n        r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n      }\n      return r.join(\",\");\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n};\nvar colonHostPartReplacer = (host, part, suffix) => {\n  return host + part.replace(_polyfillHost, \"\") + suffix;\n};\nvar convertColonHost = (cssText) => {\n  return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nvar colonHostContextPartReplacer = (host, part, suffix) => {\n  if (part.indexOf(_polyfillHost) > -1) {\n    return colonHostPartReplacer(host, part, suffix);\n  } else {\n    return host + part + suffix + \", \" + part + \" \" + host + suffix;\n  }\n};\nvar convertColonSlotted = (cssText, slotScopeId) => {\n  const slotClass = \".\" + slotScopeId + \" > \";\n  const selectors = [];\n  cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n    if (m[2]) {\n      const compound = m[2].trim();\n      const suffix = m[3];\n      const slottedSelector = slotClass + compound + suffix;\n      let prefixSelector = \"\";\n      for (let i = m[4] - 1; i >= 0; i--) {\n        const char = m[5][i];\n        if (char === \"}\" || char === \",\") {\n          break;\n        }\n        prefixSelector = char + prefixSelector;\n      }\n      const orgSelector = (prefixSelector + slottedSelector).trim();\n      const addedSelector = `${prefixSelector.trimEnd()}${slottedSelector.trim()}`.trim();\n      if (orgSelector !== addedSelector) {\n        const updatedSelector = `${addedSelector}, ${orgSelector}`;\n        selectors.push({\n          orgSelector,\n          updatedSelector\n        });\n      }\n      return slottedSelector;\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n  return {\n    selectors,\n    cssText\n  };\n};\nvar convertColonHostContext = (cssText) => {\n  return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nvar convertShadowDOMSelectors = (cssText) => {\n  return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, \" \"), cssText);\n};\nvar makeScopeMatcher = (scopeSelector2) => {\n  const lre = /\\[/g;\n  const rre = /\\]/g;\n  scopeSelector2 = scopeSelector2.replace(lre, \"\\\\[\").replace(rre, \"\\\\]\");\n  return new RegExp(\"^(\" + scopeSelector2 + \")\" + _selectorReSuffix, \"m\");\n};\nvar selectorNeedsScoping = (selector, scopeSelector2) => {\n  const re = makeScopeMatcher(scopeSelector2);\n  return !re.test(selector);\n};\nvar injectScopingSelector = (selector, scopingSelector) => {\n  return selector.replace(_selectorPartsRe, (_, before = \"\", _colonGroup, colon = \"\", after = \"\") => {\n    return before + scopingSelector + colon + after;\n  });\n};\nvar applySimpleSelectorScope = (selector, scopeSelector2, hostSelector) => {\n  _polyfillHostRe.lastIndex = 0;\n  if (_polyfillHostRe.test(selector)) {\n    const replaceBy = `.${hostSelector}`;\n    return selector.replace(_polyfillHostNoCombinatorRe, (_, selector2) => injectScopingSelector(selector2, replaceBy)).replace(_polyfillHostRe, replaceBy + \" \");\n  }\n  return scopeSelector2 + \" \" + selector;\n};\nvar applyStrictSelectorScope = (selector, scopeSelector2, hostSelector) => {\n  const isRe = /\\[is=([^\\]]*)\\]/g;\n  scopeSelector2 = scopeSelector2.replace(isRe, (_, ...parts) => parts[0]);\n  const className = \".\" + scopeSelector2;\n  const _scopeSelectorPart = (p) => {\n    let scopedP = p.trim();\n    if (!scopedP) {\n      return \"\";\n    }\n    if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n      scopedP = applySimpleSelectorScope(p, scopeSelector2, hostSelector);\n    } else {\n      const t = p.replace(_polyfillHostRe, \"\");\n      if (t.length > 0) {\n        scopedP = injectScopingSelector(t, className);\n      }\n    }\n    return scopedP;\n  };\n  const safeContent = safeSelector(selector);\n  selector = safeContent.content;\n  let scopedSelector = \"\";\n  let startIndex = 0;\n  let res;\n  const sep = /( |>|\\+|~(?!=))\\s*/g;\n  const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n  let shouldScope = !hasHost;\n  while ((res = sep.exec(selector)) !== null) {\n    const separator = res[1];\n    const part2 = selector.slice(startIndex, res.index).trim();\n    shouldScope = shouldScope || part2.indexOf(_polyfillHostNoCombinator) > -1;\n    const scopedPart = shouldScope ? _scopeSelectorPart(part2) : part2;\n    scopedSelector += `${scopedPart} ${separator} `;\n    startIndex = sep.lastIndex;\n  }\n  const part = selector.substring(startIndex);\n  shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n  scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n  return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nvar scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n  return selector.split(\",\").map((shallowPart) => {\n    if (slotSelector && shallowPart.indexOf(\".\" + slotSelector) > -1) {\n      return shallowPart.trim();\n    }\n    if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n      return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n    } else {\n      return shallowPart.trim();\n    }\n  }).join(\", \");\n};\nvar scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n  return processRules(cssText, (rule) => {\n    let selector = rule.selector;\n    let content = rule.content;\n    if (rule.selector[0] !== \"@\") {\n      selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n    } else if (rule.selector.startsWith(\"@media\") || rule.selector.startsWith(\"@supports\") || rule.selector.startsWith(\"@page\") || rule.selector.startsWith(\"@document\")) {\n      content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector);\n    }\n    const cssRule = {\n      selector: selector.replace(/\\s{2,}/g, \" \").trim(),\n      content\n    };\n    return cssRule;\n  });\n};\nvar scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\n  cssText = insertPolyfillHostInCssText(cssText);\n  cssText = convertColonHost(cssText);\n  cssText = convertColonHostContext(cssText);\n  const slotted = convertColonSlotted(cssText, slotScopeId);\n  cssText = slotted.cssText;\n  cssText = convertShadowDOMSelectors(cssText);\n  if (scopeId) {\n    cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector);\n  }\n  cssText = replaceShadowCssHost(cssText, hostScopeId);\n  cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, \" $1 \");\n  return {\n    cssText: cssText.trim(),\n    // We need to replace the shadow CSS host string in each of these selectors since we created\n    // them prior to the replacement happening in the components CSS text.\n    slottedSelectors: slotted.selectors.map((ref) => ({\n      orgSelector: replaceShadowCssHost(ref.orgSelector, hostScopeId),\n      updatedSelector: replaceShadowCssHost(ref.updatedSelector, hostScopeId)\n    }))\n  };\n};\nvar replaceShadowCssHost = (cssText, hostScopeId) => {\n  return cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n};\nvar scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n  const hostScopeId = scopeId + \"-h\";\n  const slotScopeId = scopeId + \"-s\";\n  const commentsWithHash = extractCommentsWithHash(cssText);\n  cssText = stripComments(cssText);\n  const orgSelectors = [];\n  if (commentOriginalSelector) {\n    const processCommentedSelector = (rule) => {\n      const placeholder = `/*!@___${orgSelectors.length}___*/`;\n      const comment = `/*!@${rule.selector}*/`;\n      orgSelectors.push({ placeholder, comment });\n      rule.selector = placeholder + rule.selector;\n      return rule;\n    };\n    cssText = processRules(cssText, (rule) => {\n      if (rule.selector[0] !== \"@\") {\n        return processCommentedSelector(rule);\n      } else if (rule.selector.startsWith(\"@media\") || rule.selector.startsWith(\"@supports\") || rule.selector.startsWith(\"@page\") || rule.selector.startsWith(\"@document\")) {\n        rule.content = processRules(rule.content, processCommentedSelector);\n        return rule;\n      }\n      return rule;\n    });\n  }\n  const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector);\n  cssText = [scoped.cssText, ...commentsWithHash].join(\"\\n\");\n  if (commentOriginalSelector) {\n    orgSelectors.forEach(({ placeholder, comment }) => {\n      cssText = cssText.replace(placeholder, comment);\n    });\n  }\n  scoped.slottedSelectors.forEach((slottedSelector) => {\n    const regex = new RegExp(escapeRegExpSpecialCharacters(slottedSelector.orgSelector), \"g\");\n    cssText = cssText.replace(regex, slottedSelector.updatedSelector);\n  });\n  return cssText;\n};\nexport {\n  scopeCss\n};\n"],"names":["escapeRegExpSpecialCharacters","text","replace","safeSelector","selector","placeholders","index","_","keep","replaceBy","push","content","pseudo","exp","ss","restoreSafeSelector","_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_selectorReSuffix","_polyfillHostRe","createSupportsRuleRe","_colonSlottedRe","_colonHostRe","_colonHostContextRe","_commentRe","stripComments","input","_commentWithHashRe","extractCommentsWithHash","match","_ruleRe","_curlyRe","_selectorPartsRe","OPEN_CURLY","CLOSE_CURLY","BLOCK_PLACEHOLDER","processRules","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","m","suffix","contentPrefix","startsWith","blocks","substring","length","cssRule","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","join","strEscapedBlocks","insertPolyfillHostInCssText","cssText","convertColonRule","regExp","partReplacer","parts","r","i","p","trim","colonHostPartReplacer","host","convertColonHost","colonHostContextPartReplacer","indexOf","convertColonSlotted","slotScopeId","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimEnd","updatedSelector","convertColonHostContext","convertShadowDOMSelectors","reduce","result","pattern","makeScopeMatcher","scopeSelector2","lre","rre","selectorNeedsScoping","re","test","injectScopingSelector","scopingSelector","before","_colonGroup","colon","after","applySimpleSelectorScope","hostSelector","lastIndex","selector2","applyStrictSelectorScope","isRe","className","_scopeSelectorPart","scopedP","t","safeContent","res","scopedSelector","startIndex","sep","hasHost","shouldScope","exec","separator","part2","slice","scopedPart","scopeSelector","scopeSelectorText","slotSelector","map","shallowPart","scopeSelectors","commentOriginalSelector","scopeCssText","scopeId","hostScopeId","slotted","replaceShadowCssHost","slottedSelectors","ref","scopeCss","commentsWithHash","orgSelectors","processCommentedSelector","placeholder","comment","scoped","forEach","regex"],"sourceRoot":""}